export default remarkLintFencedCodeFlag;
export type Root = import('mdast').Root;
/**
 * Configuration.
 */
export type Options = {
    /**
     * Allow language flags to be omitted (default: `false`).
     */
    allowEmpty?: boolean | null | undefined;
    /**
     * Flags to allow,
     * other flags will result in a warning (optional).
     */
    flags?: ReadonlyArray<string> | null | undefined;
};
declare const remarkLintFencedCodeFlag: {
    (config?: import("../../node_modules/unified-lint-rule/lib/index.js").Label | import("../../node_modules/unified-lint-rule/lib/index.js").Severity | readonly string[] | Readonly<Options> | [level: import("../../node_modules/unified-lint-rule/lib/index.js").Label | import("../../node_modules/unified-lint-rule/lib/index.js").Severity, option?: readonly string[] | Readonly<Options> | null | undefined] | null | undefined): ((tree: import("mdast").Root, file: import("vfile").VFile, next: import("unified").TransformCallback<import("mdast").Root>) => undefined) | undefined;
    readonly name: string;
};
//# sourceMappingURL=index.d.ts.map