"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cache_exports = {};
__export(cache_exports, {
  ModuleCache: () => ModuleCache
});
module.exports = __toCommonJS(cache_exports);
var import_debug = __toESM(require("debug"));
const log = (0, import_debug.default)("graphql-eslint:ModuleCache");
class ModuleCache {
  constructor() {
    this.map = /* @__PURE__ */ new Map();
  }
  set(cacheKey, result) {
    this.map.set(cacheKey, { lastSeen: process.hrtime(), result });
    log("setting entry for", cacheKey);
  }
  get(cacheKey, settings = {
    lifetime: 10
    /* seconds */
  }) {
    const value = this.map.get(cacheKey);
    if (!value) {
      log("cache miss for", cacheKey);
      return;
    }
    const { lastSeen, result } = value;
    if (process.env.NODE || process.hrtime(lastSeen)[0] < settings.lifetime) {
      return result;
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ModuleCache
});
