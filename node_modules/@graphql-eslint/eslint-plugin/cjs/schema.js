"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var schema_exports = {};
__export(schema_exports, {
  getSchema: () => getSchema
});
module.exports = __toCommonJS(schema_exports);
var import_debug = __toESM(require("debug"));
var import_fast_glob = __toESM(require("fast-glob"));
var import_graphql = require("graphql");
var import_cache = require("./cache.js");
const schemaCache = new import_cache.ModuleCache();
const debug = (0, import_debug.default)("graphql-eslint:schema");
function getSchema(project, schemaOptions) {
  const schemaKey = project.schema;
  if (!schemaKey) {
    return null;
  }
  const cache = schemaCache.get(schemaKey);
  if (cache) {
    return cache;
  }
  debug("Loading schema from %o", project.schema);
  const schema = project.loadSchemaSync(project.schema, "GraphQLSchema", {
    ...schemaOptions,
    pluckConfig: project.extensions.pluckConfig
  });
  if (debug.enabled) {
    debug("Schema loaded: %o", schema instanceof import_graphql.GraphQLSchema);
    const schemaPaths = import_fast_glob.default.sync(project.schema, { absolute: true });
    debug("Schema pointers %O", schemaPaths);
  }
  schemaCache.set(schemaKey, schema);
  return schema;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getSchema
});
