"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var require_deprecation_date_exports = {};
__export(require_deprecation_date_exports, {
  rule: () => rule
});
module.exports = __toCommonJS(require_deprecation_date_exports);
var import_estree_converter = require("../estree-converter/index.js");
var import_utils = require("../utils.js");
const DATE_REGEX = /^\d{2}\/\d{2}\/\d{4}$/;
const MESSAGE_REQUIRE_DATE = "MESSAGE_REQUIRE_DATE";
const MESSAGE_INVALID_FORMAT = "MESSAGE_INVALID_FORMAT";
const MESSAGE_INVALID_DATE = "MESSAGE_INVALID_DATE";
const MESSAGE_CAN_BE_REMOVED = "MESSAGE_CAN_BE_REMOVED";
const schema = {
  type: "array",
  maxItems: 1,
  items: {
    type: "object",
    additionalProperties: false,
    properties: {
      argumentName: {
        type: "string"
      }
    }
  }
};
const rule = {
  meta: {
    type: "suggestion",
    hasSuggestions: true,
    docs: {
      category: "Schema",
      description: "Require deletion date on `@deprecated` directive. Suggest removing deprecated things after deprecated date.",
      url: "https://the-guild.dev/graphql/eslint/rules/require-deprecation-date",
      examples: [
        {
          title: "Incorrect",
          code: (
            /* GraphQL */
            `
            type User {
              firstname: String @deprecated
              firstName: String
            }
          `
          )
        },
        {
          title: "Incorrect",
          code: (
            /* GraphQL */
            `
            type User {
              firstname: String @deprecated(reason: "Use 'firstName' instead")
              firstName: String
            }
          `
          )
        },
        {
          title: "Correct",
          code: (
            /* GraphQL */
            `
            type User {
              firstname: String
                @deprecated(reason: "Use 'firstName' instead", deletionDate: "25/12/2022")
              firstName: String
            }
          `
          )
        }
      ]
    },
    messages: {
      [MESSAGE_REQUIRE_DATE]: 'Directive "@deprecated" must have a deletion date for {{ nodeName }}',
      [MESSAGE_INVALID_FORMAT]: 'Deletion date must be in format "DD/MM/YYYY" for {{ nodeName }}',
      [MESSAGE_INVALID_DATE]: 'Invalid "{{ deletionDate }}" deletion date for {{ nodeName }}',
      [MESSAGE_CAN_BE_REMOVED]: "{{ nodeName }} \u0441an be removed"
    },
    schema
  },
  create(context) {
    return {
      "Directive[name.value=deprecated]"(node) {
        var _a, _b;
        const argName = ((_a = context.options[0]) == null ? void 0 : _a.argumentName) || "deletionDate";
        const deletionDateNode = (_b = node.arguments) == null ? void 0 : _b.find((arg) => arg.name.value === argName);
        if (!deletionDateNode) {
          context.report({
            node: node.name,
            messageId: MESSAGE_REQUIRE_DATE,
            data: {
              nodeName: (0, import_utils.getNodeName)(node.parent)
            }
          });
          return;
        }
        const deletionDate = (0, import_estree_converter.valueFromNode)(deletionDateNode.value);
        const isValidDate = DATE_REGEX.test(deletionDate);
        if (!isValidDate) {
          context.report({
            node: deletionDateNode.value,
            messageId: MESSAGE_INVALID_FORMAT,
            data: { nodeName: (0, import_utils.getNodeName)(node.parent) }
          });
          return;
        }
        let [day, month, year] = deletionDate.split("/");
        day = day.padStart(2, "0");
        month = month.padStart(2, "0");
        const deletionDateInMS = Date.parse(`${year}-${month}-${day}`);
        if (Number.isNaN(deletionDateInMS)) {
          context.report({
            node: deletionDateNode.value,
            messageId: MESSAGE_INVALID_DATE,
            data: {
              deletionDate,
              nodeName: (0, import_utils.getNodeName)(node.parent)
            }
          });
          return;
        }
        const canRemove = Date.now() > deletionDateInMS;
        if (canRemove) {
          const { parent } = node;
          const nodeName = parent.name.value;
          context.report({
            node: parent.name,
            messageId: MESSAGE_CAN_BE_REMOVED,
            data: { nodeName: (0, import_utils.getNodeName)(parent) },
            suggest: [
              {
                desc: `Remove \`${nodeName}\``,
                fix: (fixer) => fixer.remove(parent)
              }
            ]
          });
        }
      }
    };
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rule
});
