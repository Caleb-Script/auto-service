"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var strict_id_in_types_exports = {};
__export(strict_id_in_types_exports, {
  rule: () => rule
});
module.exports = __toCommonJS(strict_id_in_types_exports);
var import_graphql = require("graphql");
var import_utils = require("../utils.js");
const RULE_ID = "strict-id-in-types";
const schema = {
  type: "array",
  maxItems: 1,
  items: {
    type: "object",
    additionalProperties: false,
    properties: {
      acceptedIdNames: {
        ...import_utils.ARRAY_DEFAULT_OPTIONS,
        default: ["id"]
      },
      acceptedIdTypes: {
        ...import_utils.ARRAY_DEFAULT_OPTIONS,
        default: ["ID"]
      },
      exceptions: {
        type: "object",
        additionalProperties: false,
        properties: {
          types: {
            ...import_utils.ARRAY_DEFAULT_OPTIONS,
            description: "This is used to exclude types with names that match one of the specified values."
          },
          suffixes: {
            ...import_utils.ARRAY_DEFAULT_OPTIONS,
            description: "This is used to exclude types with names with suffixes that match one of the specified values."
          }
        }
      }
    }
  }
};
const rule = {
  meta: {
    type: "suggestion",
    docs: {
      description: "Requires output types to have one unique identifier unless they do not have a logical one. Exceptions can be used to ignore output types that do not have unique identifiers.",
      category: "Schema",
      recommended: true,
      url: `https://the-guild.dev/graphql/eslint/rules/${RULE_ID}`,
      requiresSchema: true,
      examples: [
        {
          title: "Incorrect",
          usage: [
            {
              acceptedIdNames: ["id", "_id"],
              acceptedIdTypes: ["ID"],
              exceptions: { suffixes: ["Payload"] }
            }
          ],
          code: (
            /* GraphQL */
            `
            # Incorrect field name
            type InvalidFieldName {
              key: ID!
            }

            # Incorrect field type
            type InvalidFieldType {
              id: String!
            }

            # Incorrect exception suffix
            type InvalidSuffixResult {
              data: String!
            }

            # Too many unique identifiers. Must only contain one.
            type InvalidFieldName {
              id: ID!
              _id: ID!
            }
          `
          )
        },
        {
          title: "Correct",
          usage: [
            {
              acceptedIdNames: ["id", "_id"],
              acceptedIdTypes: ["ID"],
              exceptions: { types: ["Error"], suffixes: ["Payload"] }
            }
          ],
          code: (
            /* GraphQL */
            `
            type User {
              id: ID!
            }

            type Post {
              _id: ID!
            }

            type CreateUserPayload {
              data: String!
            }

            type Error {
              message: String!
            }
          `
          )
        }
      ]
    },
    schema
  },
  create(context) {
    const options = {
      acceptedIdNames: ["id"],
      acceptedIdTypes: ["ID"],
      exceptions: {},
      ...context.options[0]
    };
    const schema2 = (0, import_utils.requireGraphQLSchemaFromContext)(RULE_ID, context);
    const rootTypeNames = [
      schema2.getQueryType(),
      schema2.getMutationType(),
      schema2.getSubscriptionType()
    ].filter(import_utils.truthy).map((type) => type.name);
    const selector = `ObjectTypeDefinition[name.value!=/^(${rootTypeNames.join("|")})$/]`;
    return {
      [selector](node) {
        var _a, _b, _c;
        const typeName = node.name.value;
        const shouldIgnoreNode = ((_a = options.exceptions.types) == null ? void 0 : _a.includes(typeName)) || ((_b = options.exceptions.suffixes) == null ? void 0 : _b.some((suffix) => typeName.endsWith(suffix)));
        if (shouldIgnoreNode) {
          return;
        }
        const validIds = (_c = node.fields) == null ? void 0 : _c.filter((field) => {
          const fieldNode = field.rawNode();
          const isValidIdName = options.acceptedIdNames.includes(fieldNode.name.value);
          let isValidIdType = false;
          if (fieldNode.type.kind === import_graphql.Kind.NON_NULL_TYPE && fieldNode.type.type.kind === import_graphql.Kind.NAMED_TYPE) {
            isValidIdType = options.acceptedIdTypes.includes(fieldNode.type.type.name.value);
          }
          return isValidIdName && isValidIdType;
        });
        if ((validIds == null ? void 0 : validIds.length) !== 1) {
          const pluralNamesSuffix = options.acceptedIdNames.length > 1 ? "s" : "";
          const pluralTypesSuffix = options.acceptedIdTypes.length > 1 ? "s" : "";
          context.report({
            node: node.name,
            message: `${(0, import_utils.displayNodeName)(node)} must have exactly one non-nullable unique identifier.
Accepted name${pluralNamesSuffix}: ${(0, import_utils.englishJoinWords)(options.acceptedIdNames)}.
Accepted type${pluralTypesSuffix}: ${(0, import_utils.englishJoinWords)(options.acceptedIdTypes)}.`
          });
        }
      }
    };
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rule
});
