"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var require_deprecation_reason_exports = {};
__export(require_deprecation_reason_exports, {
  rule: () => rule
});
module.exports = __toCommonJS(require_deprecation_reason_exports);
var import_estree_converter = require("../estree-converter/index.js");
var import_utils = require("../utils.js");
const rule = {
  meta: {
    docs: {
      description: "Require all deprecation directives to specify a reason.",
      category: "Schema",
      url: "https://the-guild.dev/graphql/eslint/rules/require-deprecation-reason",
      recommended: true,
      examples: [
        {
          title: "Incorrect",
          code: (
            /* GraphQL */
            `
            type MyType {
              name: String @deprecated
            }
          `
          )
        },
        {
          title: "Incorrect",
          code: (
            /* GraphQL */
            `
            type MyType {
              name: String @deprecated(reason: "")
            }
          `
          )
        },
        {
          title: "Correct",
          code: (
            /* GraphQL */
            `
            type MyType {
              name: String @deprecated(reason: "no longer relevant, please use fullName field")
            }
          `
          )
        }
      ]
    },
    type: "suggestion",
    schema: []
  },
  create(context) {
    return {
      "Directive[name.value=deprecated]"(node) {
        var _a;
        const reasonArgument = (_a = node.arguments) == null ? void 0 : _a.find(
          (arg) => arg.name.value === "reason"
        );
        const value = reasonArgument && String((0, import_estree_converter.valueFromNode)(reasonArgument.value)).trim();
        if (!value) {
          context.report({
            node: node.name,
            message: `Deprecation reason is required for ${(0, import_utils.getNodeName)(node.parent)}.`
          });
        }
      }
    };
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rule
});
