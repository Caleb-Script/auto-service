import "../chunk-BMTV3EA2.js";
import {
  Kind,
  TypeInfo,
  visit,
  visitWithTypeInfo
} from "graphql";
import { convertLocation } from "./utils.js";
function convertToESTree(node, schema) {
  const typeInfo = schema && new TypeInfo(schema);
  const visitor = {
    leave(node2, key, parent) {
      const leadingComments = "description" in node2 && node2.description ? [
        {
          type: node2.description.block ? "Block" : "Line",
          value: node2.description.value
        }
      ] : [];
      const calculatedTypeInfo = typeInfo ? {
        argument: typeInfo.getArgument(),
        defaultValue: typeInfo.getDefaultValue(),
        directive: typeInfo.getDirective(),
        enumValue: typeInfo.getEnumValue(),
        fieldDef: typeInfo.getFieldDef(),
        inputType: typeInfo.getInputType(),
        parentInputType: typeInfo.getParentInputType(),
        parentType: typeInfo.getParentType(),
        gqlType: typeInfo.getType()
      } : {};
      const rawNode = () => {
        if (parent && key !== void 0) {
          return parent[key];
        }
        return node2.kind === Kind.DOCUMENT ? {
          ...node2,
          definitions: node2.definitions.map(
            (definition) => definition.rawNode()
          )
        } : node2;
      };
      const commonFields = {
        ...node2,
        type: node2.kind,
        loc: convertLocation(node2.loc),
        range: [node2.loc.start, node2.loc.end],
        leadingComments,
        // Use function to prevent RangeError: Maximum call stack size exceeded
        typeInfo: () => calculatedTypeInfo,
        // Don't know if can fix error
        rawNode
      };
      return "type" in node2 ? {
        ...commonFields,
        gqlType: node2.type
      } : commonFields;
    }
  };
  return visit(
    node,
    typeInfo ? visitWithTypeInfo(typeInfo, visitor) : visitor
  );
}
export {
  convertToESTree
};
