import { AST } from 'eslint';
import { Position } from 'estree';
import { GraphQLSchema, ASTNode, Kind } from 'graphql';
import { g as GraphQLESLintRuleContext, j as SiblingOperations } from './types-2e1afd7c.js';
import { GraphQLESTreeNode } from './estree-converter/types.mjs';
import '@graphql-tools/utils';
import 'graphql-config';
import 'json-schema-to-ts';

declare function requireSiblingsOperations(ruleId: string, context: GraphQLESLintRuleContext): SiblingOperations | never;
declare function requireGraphQLSchemaFromContext(ruleId: string, context: GraphQLESLintRuleContext): GraphQLSchema | never;
declare const logger: {
    error: (...args: unknown[]) => void;
    warn: (...args: unknown[]) => void;
};
declare const normalizePath: (path: string) => string;
declare const VIRTUAL_DOCUMENT_REGEX: RegExp;
declare const CWD: string;
declare const getTypeName: (node: ASTNode) => string;
declare const TYPES_KINDS: readonly [Kind.OBJECT_TYPE_DEFINITION, Kind.INTERFACE_TYPE_DEFINITION, Kind.ENUM_TYPE_DEFINITION, Kind.SCALAR_TYPE_DEFINITION, Kind.INPUT_OBJECT_TYPE_DEFINITION, Kind.UNION_TYPE_DEFINITION];
type CaseStyle = 'camelCase' | 'kebab-case' | 'PascalCase' | 'snake_case' | 'UPPER_CASE';
declare const pascalCase: (str: string) => string;
declare const camelCase: (str: string) => string;
declare const convertCase: (style: CaseStyle, str: string) => string;
declare function getLocation(start: Position, fieldName?: string): AST.SourceLocation;
declare const REPORT_ON_FIRST_CHARACTER: {
    column: number;
    line: number;
};
declare const ARRAY_DEFAULT_OPTIONS: {
    readonly type: "array";
    readonly uniqueItems: true;
    readonly minItems: 1;
    readonly items: {
        readonly type: "string";
    };
};
declare const englishJoinWords: (words: string[]) => string;
type Truthy<T> = T extends '' | 0 | false | null | undefined ? never : T;
declare function truthy<T>(value: T): value is Truthy<T>;
declare function displayNodeName(node: GraphQLESTreeNode<ASTNode>): string;
declare function getNodeName(node: GraphQLESTreeNode<ASTNode>): string;

export { ARRAY_DEFAULT_OPTIONS, CWD, CaseStyle, REPORT_ON_FIRST_CHARACTER, TYPES_KINDS, VIRTUAL_DOCUMENT_REGEX, camelCase, convertCase, displayNodeName, englishJoinWords, getLocation, getNodeName, getTypeName, logger, normalizePath, pascalCase, requireGraphQLSchemaFromContext, requireSiblingsOperations, truthy };
